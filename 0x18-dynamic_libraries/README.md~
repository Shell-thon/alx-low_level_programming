# 0x18. C - Dynamic libraries

## Resources
* [What is difference between Dynamic and Static library (Static and Dynamic linking)](https://www.geeksforgeeks.org/difference-between-static-and-dynamic-libraries/)
* [create dynamic libraries on Linux](http://www.akira.ruc.dk/~keld/teaching/CAN_e14/Read/create_lib.html)
* [Technical Writing](https://en.wikipedia.org/wiki/Technical_writing)

## Learning Objectives
At the end of this project, you are expected to be able to explain to anyone, without the help of Google:

### General
* What is a dynamic library, how does it work, how to create one, and how to use it
* What is the environment variable `$LD_LIBRARY_PATH` and how to use it
* What are the differences between static and shared libraries
* Basic usage of `nm`, `ldd`, `ldconfig`

# Copyright - Plagiarism
You are tasked to come up with solutions for the tasks below yourself to meet with the above learning objectives. You will not be able to meet the objectives of this or any following project by copying and pasting someone else’s work. Any form of plagiarism is strictly forbidden and will result in removal from the program.

## Requirements

### C
* Allowed editors: vi, vim, emacs
* All your files will be compiled on Ubuntu 20.04 LTS using gcc, using the options -Wall -Werror -Wextra -pedantic -std=gnu89
* All your files should end with a new line
* A README.md file, at the root of the folder of the project is mandatory
* Your code should use the Betty style. It will be checked using betty-style.pl and betty-doc.pl
* You are not allowed to use global variables
* No more than 5 functions per file
* You are not allowed to use the standard library. Any use of functions like printf, puts, etc… is forbidden
* You are allowed to use _putchar
* The prototypes of all your functions and the prototype of the function _putchar should be included in your header file called main.h
* Don’t forget to push your header file

# Bash
- Allowed editors: vi, vim, emacs
- All your scripts will be tested on Ubuntu 20.04 LTS
- All your files should end with a new line (why?)
- This is so that the terminal does not misinterpret the last line of the file as part of an unfinished command.
- The first line of all your files should be exactly #!/bin/bash
- A README.md file, at the root of the folder of the project, describing what each script is doing
- All your files must be executable